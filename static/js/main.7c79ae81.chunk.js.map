{"version":3,"sources":["Header/logo.png","listenApi.js","firebase.js","Form/Form.js","LoadingBar/LoadingBar.js","Header/Header.js","Podcast/Podcast.js","Playlist/Playlist.js","SideMenu/SideMenu.js","Footer/Footer.js","PodcastInfo/PodcastInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","errorMessages","listenApi","requestType","params","Axios","url","headers","errorResponse","error","console","log","status","response","message","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","props","setUserTime","userTime","selectGenre","genres","handleSubmit","action","className","htmlFor","onChange","type","name","id","min","max","value","map","genre","key","onClick","LoadingBar","loading","Header","this","src","logo","Component","Podcast","podcasts","add","sort","isStarted","podcast","audio_length_sec","title_original","description_original","thumbnail","podcastTitle","duration","Math","round","parseInt","shortDescription","split","slice","join","to","pathname","query","alt","getPodcastInfo","Playlist","state","currentTitle","setState","playlist","playlist_title","removeItem","title","remove","setActive","current","updateName","rename","totalTime","onKeyDown","e","document","getElementById","blur","placeholder","icon","faTimes","data","listennotes_url","minutes","push","href","rel","faTrashAlt","length","reduce","a","b","SideMenu","playlists","createPlaylist","faBars","faPlus","Footer","StopPosition","ShowAtPosition","EasingType","AnimationDuration","ContainerClassName","TransitionClassName","style","ToggledStyle","PodcastInfo","App","event","target","genreString","selectedIndex","text","preventDefault","getPodcasts","swal","removePlaylistItem","dbRef","database","ref","uid","currentPlaylist","child","removePlaylist","userPlaylists","addToPlaylist","playlistName","newKey","set","setActivePlaylist","renamePlaylist","updatePlaylistName","newName","nextPage","offset","prevPage","sortPodcasts","sortType","sortedPodcasts","parseFloat","isLoading","userPlaylist","top_level_only","then","catch","alert","on","newState","val","user","users","newPlaylist","auth","signInAnonymously","code","onAuthStateChanged","q","len_min","len_max","genre_ids","language","results","exact","path","render","class","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c79ae81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.545e9040.png\";","import Axios from 'axios';\r\n\r\n// listen API\r\n// const key = \"5df881c89d644904bc39af8b922c9441\"; //old key\r\nconst key = \"d370e5f11d0a4b14956d88517e75fd8a\"; // Nathan's key\r\nconst endpoint = \"https://listen-api.listennotes.com/api/v2/\";\r\n\r\nconst errorMessages = {\r\n\t['400']: '400 - There is something wrong on your end, please try again',\r\n\t['401']: '401 - Wrong API key or problems with account',\r\n\t['404']: '404 - No results found, please try again',\r\n\t['429']: '429 - API quota exceeded - please try again later',\r\n\t['500']: '500 - Unexpected server errors - please try again later',\r\n}\r\n\r\n\r\n/**\r\n * Calls the API, requires a requestType and various object parameters.\r\n * @param {string} requestType the string to append to the endpoint\r\n * @param {object} params any additional parameters to send\r\n * @returns {Promise} The Axios promise\r\n */\r\nexport default function listenApi(requestType, params) {\r\n\treturn Axios({\r\n\t\turl: endpoint + requestType,\r\n\t\tparams: {\r\n\t\t\t...params,\r\n\t\t},\r\n\t\theaders: {\r\n\t\t\t['X-ListenAPI-Key']: key,\r\n\t\t}\r\n\t})\r\n}\r\n\r\n/**\r\n * Return the appropriate error message for given API code\r\n * @param {object} error\r\n * @returns {string} The message to display for the provided error code\r\n */\r\nexport function errorResponse(error) {\r\n\tconsole.log(typeof error);\r\n\tconst { status } = error.response;\r\n\tlet message = 'Unknown error, please refresh and try again';\r\n\tfor (let error in errorMessages) {\r\n\t\tif (status == error) message = errorMessages[error];\r\n\t}\r\n\treturn message;\r\n}","// firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport \"firebase/auth\";\r\n\r\n\r\n// Initialize Firebase\r\n// *** USE YOUR CONFIG OBJECT ***\r\nconst config = {\r\n  apiKey: \"AIzaSyBwLq_-FMp8lGW3_AVNC71e_tUWM6vefR8\",\r\n  authDomain: \"podcast-planner-fde21.firebaseapp.com\",\r\n  databaseURL: \"https://podcast-planner-fde21.firebaseio.com\",\r\n  projectId: \"podcast-planner-fde21\",\r\n  storageBucket: \"podcast-planner-fde21.appspot.com\",\r\n  messagingSenderId: \"457751978532\",\r\n  appId: \"1:457751978532:web:5196b0b12f491402fcaeb1\",\r\n};\r\nfirebase.initializeApp(config);\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React from 'react';\r\nimport \"./index.css\";\r\n// import \"../Header/index.css\";\r\n\r\nexport default function Form(props) {\r\n\tconst { setUserTime, userTime, selectGenre, genres, handleSubmit } = props;\r\n\r\n\treturn (\r\n\t\t<form action=\"submit\" className=\"form\">\r\n\t\t\t{/* time slider */}\r\n\t\t\t<label htmlFor=\"time\">Select Podcast Duration</label>\r\n\t\t\t<input\r\n\t\t\t\tonChange={setUserTime}\r\n\t\t\t\ttype=\"range\"\r\n\t\t\t\tname=\"time\"\r\n\t\t\t\tid=\"time\"\r\n\t\t\t\tmin=\"0\"\r\n\t\t\t\tmax=\"120\"\r\n\t\t\t\tvalue={userTime}\r\n\t\t\t/>\r\n\t\t\t{/* display time selected */}\r\n\t\t\t<span>{userTime} minute(s)</span>\r\n\r\n\t\t\t{/* genre select */}\r\n\t\t\t<label htmlFor=\"genre\"></label>\r\n\t\t\t\r\n\t\t\t<select onChange={selectGenre} name=\"genre\" id=\"genre\">\r\n\t\t\t\t<option value=\"\">Select Genre ⬇</option>\r\n\t\t\t\t{genres.map((genre) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<option className=\"options\" key={genre.id} value={genre.id}>\r\n\t\t\t\t\t\t\t{genre.name}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</select>\r\n\t\t\t\r\n\t\t\t<button onClick={handleSubmit} type=\"submit\" className=\"headerButton\">\r\n\t\t\t\tSubmit\r\n      </button>\r\n\t\t</form>\r\n\t)\r\n}\r\n","import React from 'react'\r\n\r\nimport './index.css'\r\n\r\nexport default function LoadingBar(props) {\r\n\tconst { loading } = props;\r\n\t\r\n\treturn (\r\n\t\t<div className={`loading-bar ${loading ? '' : 'disabled'}`}>\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { Component } from 'react';\r\nimport Form from '../Form/Form';\r\nimport './index.css';\r\nimport logo from './logo.png';\r\n\r\nimport LoadingBar from '../LoadingBar/LoadingBar'\r\n\r\nclass Header extends Component {\r\n    render() {\r\n\t\t\tconst { setUserTime, userTime, selectGenre, genres, handleSubmit, loading } = this.props;\r\n\r\n        return (\r\n            <header>\r\n\r\n                <nav className=\"navBar\">\r\n                    <p>Podcast Planner</p>\r\n                </nav>\r\n\r\n                <div className=\"flexContainer wrapper\">\r\n                    <div className=\"containerOne\">\r\n                        <img src={logo} className=\"logo\"/>\r\n                    </div>\r\n                    <div className=\"containerTwo\">\r\n                        {/* <img src={logo} className=\"logo\"/> */}\r\n                        <h1>Podcast Planner</h1>\r\n                        <p>Welcome to the Podcast Planner! Whether you're walking, hiking, road tripping or just plain hanging out, use this app to select podcast durations based on your journey time and create playlists!</p>\r\n                    </div>\r\n                    <div className=\"containerThree\">\r\n                        <Form \r\n                            setUserTime={setUserTime}\r\n                            userTime={userTime}\r\n                            selectGenre={selectGenre}\r\n                            genres={genres}\r\n                            handleSubmit={handleSubmit}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n\t\t\t\t<LoadingBar loading={loading} />\r\n                <div className=\"shape\"></div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header; ","import React from 'react'\r\nimport './index.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Podcast(props) {\r\n\tconst { podcasts, add, isStarted, sort } = props;\r\n\r\n  /**\r\n   * Generates information for the podcast episode to display on the page. \r\n   * @param {*} podcast \r\n   */\r\n  const getPodcastInfo = (podcast) => {\r\n    const { audio_length_sec, id, title_original, description_original, thumbnail } = podcast;\r\n    const podcastTitle = podcast.podcast.title_original;\r\n    const duration = Math.round(\r\n\t\t  parseInt(audio_length_sec / 60)\r\n    );\r\n\t  const description = description_original;\r\n\r\n    let shortDescription = description.split(' ').slice(0, 20).join(' ');\r\n    shortDescription += '...';\r\n\r\n    return (\r\n      <>\r\n          <h2>{podcastTitle}</h2>\r\n        {/* <Link to={{ pathname: `/${this.props.testvalue}`, query: { backUrl } }} /> */}\r\n        \r\n\r\n        <Link \r\n        to={ {pathname: `/podcast/${podcast.id}`, query: {podcast: podcast}} }>\r\n          <img src={thumbnail} alt='' />\r\n        </Link>\r\n          <h3>{title_original}</h3>\r\n          <p>Length: {duration} minutes</p>\r\n          <p>{shortDescription}</p>\r\n         \r\n          <button onClick={() => add(podcast)}>Add To Playlist</button>\r\n      </>\r\n    )\r\n  }\r\n\r\n\treturn (\r\n    <div>\r\n      <h2 className=\"podcastHeading\">Your Podcast Selections:</h2>\r\n      <div className=\"wrapper\">\r\n        {/* { !isStarted ? <h2 className=\"podcastHeading\">Set your time and pick a genre to get started!</h2> :\r\n        !podcasts.length ? <h2 className=\"podcastHeading\">No podcasts found! Try searching for something else</h2> : */}\r\n        <div className=\"sortContainer\">\r\n          <div className=\"childContainer\">\r\n            <p className=\"sortTitle\">Sort by Podcast Length:</p>\r\n          </div>\r\n          <div className=\"childTwoContainer\">\r\n            <button className=\"sorting\" onClick={() => sort('asc')}>Ascending ⬆</button>\r\n            <button className=\"sorting\" onClick={() => sort('desc')}>Descending ⬇</button>\r\n          </div>\r\n        </div>\r\n        <>\r\n          <ul className=\"podcastList\">\r\n              {podcasts.map((podcast) => {\r\n                return (\r\n                  <li className=\"podcast\" key={podcast.id}> \r\n                    {getPodcastInfo(podcast)} \r\n                  </li> \r\n                )\r\n              })}\r\n            </ul>\r\n        </>\r\n      {/* } */}\r\n      </div>\r\n    </div>\r\n\r\n\t)\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './index.css'\r\n\r\n\r\nexport default class Playlist extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcurrentTitle: '',\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({\r\n\t\t\tcurrentTitle: this.props.playlist.playlist_title,\r\n\t\t})\r\n\t}\r\n\t\r\n\r\n\trender() {\r\n\t\tconst { playlist, title, removeItem, remove, setActive, current, rename, updateName, userTime } = this.props;\r\n\t\tconst { key, playlist_title } = playlist;\r\n    const totalTime = [];\r\n\r\n\t\t/** \r\n\t\t* unfocus this element on enter\r\n\t\t*/\r\n\t\tconst unfocus = (e) => {\r\n\t\t\tif (e.key === 'Enter') {\r\n\t\t\t\tdocument.getElementById(playlist.key).blur();\r\n\t\t\t}\r\n\t\t}\r\n    // Display time information for user\r\n    const showTime = () => {\r\n      return (\r\n        <li>\r\n          {Math.round(totalTime.reduce((a, b) => a + b))} / {userTime} Minutes\r\n        </li>\r\n      )\r\n    }\r\n    return (\r\n      <li key={key} className={`Playlist ${key === current ? 'selected' : ''}`} onClick={() => setActive(key, this.state.currentTitle)}>\r\n    \r\n        <h3>\r\n          <label className=\"sr-only\" htmlFor={key}>{playlist_title}</label>\r\n          <input \r\n            onChange={updateName}\r\n            // onBlur={() => rename(key)}\r\n            onKeyDown={unfocus}\r\n            type=\"text\"\r\n            id={key}\r\n            value={playlist_title}\r\n            placeholder=\"Untitled Playlist\"\r\n          />\r\n        </h3>\r\n  \r\n        <button className=\"Playlist-delete\" onClick={() => remove(key)}>\r\n          <FontAwesomeIcon icon={faTimes} />\r\n        </button>\r\n        \r\n        <ul>\r\n          {playlist.data.map((podcast) => {\r\n            // if podcast has data, and isn't the title\r\n            if (podcast.data && podcast.key !== 'playlist_title') {\r\n              const { title_original, listennotes_url, audio_length_sec } = podcast.data;\r\n              const minutes = parseInt(audio_length_sec) / 60;\r\n              totalTime.push(minutes)\r\n              // {totalTime.push()}\r\n              return (\r\n                <li key={podcast.key}>\r\n                  <a href={listennotes_url} rel=\"noreferrer\">{title_original}</a>\r\n                  <button className=\"remove\" onClick={() => removeItem(podcast.key)}>\r\n                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                  </button>\r\n                </li>\r\n              );\r\n              }\r\n          })}\r\n          {totalTime.length != 0 ? (showTime()) : null}\r\n        </ul>\r\n  \r\n      </li>\r\n    )\r\n  }\r\n  }\r\n  \r\n\r\n","import React from 'react'\r\nimport Playlist from '../Playlist/Playlist'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars, faTimes, faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './index.css'\r\n\r\n/**\r\n * Rendering the side menu\r\n * @param {*} props \r\n */\r\nexport default function SideMenu(props) {\r\n\tconst { playlists, remove, removeItem, createPlaylist, setActive, current, rename, updateName, title, userTime } = props;\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<input type=\"checkbox\" name=\"hamburger\" id=\"hamburger\"/>\r\n\t\t\t<label htmlFor=\"hamburger\">\r\n\t\t\t\t<FontAwesomeIcon icon={faBars} />\r\n\t\t\t</label>\r\n\t\t\t<div className=\"SideMenu\">\r\n\t\t\t\t<h2>Your Playlists</h2>\r\n\t\t\t\t\r\n\t\t\t\t<button onClick={() => createPlaylist(0)}><FontAwesomeIcon icon={faPlus} /></button>\r\n\r\n\t\t\t\t<ul>\r\n\r\n\t\t\t\t\t{playlists.map(playlist => {\r\n\t\t\t\t\t\treturn <Playlist\r\n\t\t\t\t\t\t\tplaylist={playlist}\r\n\t\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\t\tremoveItem={removeItem}\r\n\t\t\t\t\t\t\tsetActive={setActive}\r\n\t\t\t\t\t\t\tcurrent={current}\r\n\t\t\t\t\t\t\trename={rename}\r\n\t\t\t\t\t\t\tupdateName={updateName}\r\n              title={title}\r\n              userTime={userTime}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t})}\r\n\r\n\t\t\t\t</ul>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport {VerticleButton as ScrollUpButton} from \"react-scroll-up-button\";\r\nimport \"./index.css\";\r\n\r\nclass Footer extends Component {\r\n   render() {\r\n      return(\r\n            <footer>\r\n               <div className=\"footerBar\">\r\n               <div className=\"wrapper container\">\r\n                  <div>\r\n                  <ScrollUpButton\r\n                     StopPosition={0}\r\n                     ShowAtPosition={130}\r\n                     EasingType='easeOutCubic'\r\n                     AnimationDuration={500}\r\n                     ContainerClassName='ScrollUpButton__Container'\r\n                     TransitionClassName='ScrollUpButton__Toggled'\r\n                     style={{}}\r\n                     ToggledStyle={{}}\r\n                  /> \r\n                  </div>\r\n                  <div className=\"containerDiv\">\r\n                     <p> Podcast Planner!  Start Lisening Today </p>\r\n                     <p className=\"junoMade\">Podcast Planner Made by Nathan Kanigsberg, Paige Freeman-Cyopeck, Reda Waseem, & Alex Gould at Juno College 2020 </p>\r\n                  </div>\r\n               </div>\r\n               </div>\r\n            </footer>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Footer; ","import React, {Component} from 'react'\r\n\r\nexport default class PodcastInfo extends Component {\r\n\tconstructor() {\r\n    super();\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t{/* console.log(this.props.match.params.testvalue, this.props.location.query.backurl) */}\r\n\r\n\t\t\t\t<h1>Podcastinfo</h1>\r\n\t\t\t\t{/* {console.log(this.props)} */}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport listenApi, { errorResponse } from \"./listenApi\";\r\n\r\nimport firebase from './firebase'\r\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\r\nimport Header from './Header/Header.js';\r\nimport Podcast from './Podcast/Podcast';\r\n// import Playlist from './Playlist/Playlist';\r\n// import Form from './Form/Form'\r\n// import Playlist from './Components/Playlist'\r\nimport SideMenu from './SideMenu/SideMenu';\r\n\r\nimport Footer from './Footer/Footer.js';\r\nimport Playlist from \"./Playlist/Playlist\";\r\n\r\nimport PodcastInfo from './PodcastInfo/PodcastInfo'\r\nimport swal from 'sweetalert';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      genres: [],\r\n      genre: \"\",\r\n      genreString: \"\",\r\n      podcasts: [],\r\n\t\t\tuserTime: 20,\r\n\t\t\tisStarted: false,\r\n\t\t\tisLoading: false,\r\n\t\t\tuserPlaylist: [],\r\n\t\t\tuid: '',\r\n\t\t\tuserPlaylists: [],\r\n\t\t\tcurrentPlaylist: '',\r\n      playlistName: '',\r\n\r\n      offset: 10,\r\n\r\n    };\r\n  }\r\n\r\n  // at runtime\r\n  componentDidMount() {\r\n\t\t// retrieving the genres, storing them in state.\r\n    listenApi(\"genres\", { top_level_only: 1 }).then((response) => {\r\n\t\t\tthis.setState({\r\n        genres: response.data.genres,\r\n      });\r\n    }).catch(error => {\r\n\t\t\talert(errorResponse(error));\r\n\t\t});\r\n    // get podcasts at runtime (any genre)\r\n\t\t// this.getPodcasts();\r\n\t\t\r\n\r\n  // firebase\r\n\r\n \tconst dbRef = firebase.database().ref();\r\n    // listen for changes to db and updateA\r\n    dbRef.on('value', response => {\r\n      const newState = [];\r\n      const data = response.val();\r\n\t\t\t\r\n\t\t\tlet playlistKey = '';\r\n\r\n\t\t\t// if the database isn't empty\r\n\t\t\tif (data) {\r\n\t\t\t\tconst user = data.users[this.state.uid];\r\n\r\n\r\n\r\n\t\t\t\t// if the user exists\r\n\t\t\t\tif (user) {\r\n\t\t\t\t\t// loop through playlists\r\n\t\t\t\t\tfor (let playlist in user) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// if no playlist selected, set as this playlist\r\n\t\t\t\t\t\tif (!this.state.currentPlaylist) {\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tcurrentPlaylist: playlist,\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\tconst newPlaylist = [];\r\n\r\n\t\t\t\t\t\t// loop through podcasts inside playlist\r\n\t\t\t\t\t\tfor (let podcast in user[playlist]) {\r\n\t\t\t\t\t\t\tif (podcast !== 'playlist_title') {\r\n\t\t\t\t\t\t\t\tnewPlaylist.push({ key: podcast, data: user[playlist][podcast]})\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\r\n\r\n\t\t\t\t\t\t// playlistKey = playlist;\r\n\r\n\t\t\t\t\t\tnewState.push({ key: playlist, playlist_title: user[playlist].playlist_title, data: newPlaylist });\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tuserPlaylists: newState,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if the user doesn't exist\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tuserPlaylists: [],\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tuserPlaylists: [],\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t      \r\n\t\t})\r\n\r\n\r\n\t\tfirebase\r\n      .auth()\r\n      .signInAnonymously()\r\n      .catch(function (error) {\r\n        // Handle Errors here.\r\n        const errorCode = error.code;\r\n\t\t\t\tconst errorMessage = error.message;\r\n        // ...\r\n      });\r\n\r\n\t\t\tfirebase.auth().onAuthStateChanged( (user) => {\r\n        if (user) {\r\n          // User is signed in.\r\n          // var isAnonymous = user.isAnonymous;\r\n\t\t\t\t\tconst uid = user.uid;\r\n\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tuid,\r\n\t\t\t\t\t})\r\n\r\n          // ...\r\n        } else {\r\n\t\t\t\t\t// User is signed out.\r\n          // ...\r\n        }\r\n        // ...\r\n      });\r\n\r\n\r\n\t}\r\n\r\n\t/** retrieving podcasts with api call from passed params. storing results in state. */\r\n  getPodcasts() {\r\n\r\n\t\tthis.setState({\r\n\t\t\tisStarted: true,\r\n\t\t\tisLoading: true,\r\n\t\t})\r\n\r\n    // const genreString = this.state.genreString;\r\n    const { genre, genreString, userTime, offset } = this.state;\r\n\r\n    const len_min = 4;\r\n    const len_max = parseInt(userTime) + 5;\r\n\r\n\r\n    listenApi(\"search\", {\r\n      q: genreString,\r\n      len_min,\r\n      len_max,\r\n      offset: offset,\r\n      genre_ids: genre,\r\n      // sort_by_date: 1,\r\n      language: \"English\",\r\n    }).then(response => {\r\n      this.setState({\r\n        podcasts: response.data.results,\r\n        isLoading: false,\r\n      })\r\n\t\t}).catch(error => {\r\n\t\t\talert(errorResponse(error));\r\n\t\t});\r\n\r\n\r\n    // listenApi(\"best_podcasts\", { genre_id: this.state.genre }).then(\r\n    //   (response) => {\r\n    //     this.setState(\r\n    //       {\r\n    //         podcasts: response.data.podcasts,\r\n    //       }\r\n    //       // () => {\r\n    //       //   const listCopy = [...this.state.podcasts];\r\n    //       //   listCopy.forEach((podcast, index) => {\r\n    //       //     listCopy[index].avg_minutes = 0;\r\n    //       //   });\r\n\r\n    //       //   this.setState({\r\n    //       //     podcasts: listCopy,\r\n    //       //   });\r\n    //       // }\r\n    //     );\r\n    //     this.getPodcastTimes();\r\n    //   }\r\n    // );\r\n  }\r\n\r\n  /** get average time of podcast episodes and store in state */\r\n  // getPodcastTimes = () => {\r\n  //   // make copy of podcast state\r\n  //   let listCopy = [...this.state.podcasts];\r\n\r\n  //   // list of podcast IDs\r\n  //   const podcastIDs = listCopy.map((podcast) => podcast.id);\r\n\r\n  //   // loop through podcast IDs and add average episode times to list copy\r\n  //   podcastIDs.forEach((id, index) => {\r\n  //     listenApi(`podcasts/${id}`).then((response) => {\r\n  //       const episodes = response.data.episodes;\r\n\r\n\r\n  //       // get average time of episodes\r\n  //       const avg_minutes = this.getAverageTime(episodes);\r\n\r\n  //       listCopy[index].avg_minutes = avg_minutes;\r\n  //       this.setState({\r\n  //         podcasts: listCopy,\r\n  //         isLoading: false,\r\n  //       });\r\n     \r\n  //     });\r\n   \r\n  //   });\r\n\r\n\r\n  //   // replace podcast state with new list containing average minutes\r\n\r\n\r\n  // };\r\n\r\n  // /** Get average time of episodes */\r\n  // getAverageTime(episodes) {\r\n  //   let total = 0;\r\n  //   // loop through episodes, return the total audio length in seconds for each epsiode.\r\n  //   episodes.forEach((episode) => {\r\n  //     total += episode.audio_length_sec;\r\n  //   });\r\n  //   // converting average time from seconds to minutes for each podcast\r\n  //   const minutes = Math.round(total / episodes.length / 60);\r\n\r\n\r\n  //   return minutes;\r\n  // }\r\n\r\n\r\n\t/**\r\n\t * Set genre in state to reflect the user selected genre. \r\n\t * @param {event} event onChange\r\n\t */\r\n   selectGenre = (event) => {\r\n    this.setState(\r\n      {\r\n        genre: event.target.value,\r\n        genreString: event.target[event.target.selectedIndex].text,\r\n      }\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Set userTime in state to reflect the user's choice.\r\n   * @param {event} event onChange\r\n   */\r\n  setUserTime = (event) => {\r\n    this.setState({\r\n      userTime: event.target.value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get podcasts on user click of submit button. Calls function that has the API call.\r\n   * @param {event} event onClick\r\n   */\r\n  handleSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (this.state.genre) {\r\n\t\t\tthis.getPodcasts();\r\n\t\t} else {\r\n\t\t  swal('Please select a genre!');\r\n\t\t}\r\n  };\r\n\r\n\t/**\r\n   * Removes playlist item from firebase on click in the slideout menu.\r\n   * @param {String} key onClick\r\n   */\r\n\tremovePlaylistItem = key => {\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tconst { uid, currentPlaylist } = this.state;\r\n\t\tdbRef.child('users').child(uid).child(currentPlaylist).child(key).remove();\r\n\t}\r\n\r\n\r\n\t/**\r\n   * Removes entire playlist from firebase, based on the key. \r\n   * @param {string} key \r\n   */\r\n\tremovePlaylist = key => {\r\n\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tconst { uid, userPlaylists } = this.state;\r\n\t\tdbRef.child('users').child(uid).child(key).remove();\r\n\r\n\t\t// Reset active playlist\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentPlaylist: '',\r\n\t\t\t})\r\n\t}\r\n\r\n\t/**\r\n   * Adds podcast to firebase playlist\r\n   * @param {object} podcast \r\n   */\r\n\taddToPlaylist = podcast => {\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tconst { uid, userPlaylists, currentPlaylist, playlistName } = this.state;\r\n\r\n\t\t// if playlist doesn't have content\r\n\t\tif (!userPlaylists.length) {\r\n\t\t\tthis.createPlaylist(podcast);\r\n\t\t} else { // if playlist has content\r\n\t\t\tdbRef.child('users').child(uid).child(currentPlaylist).push(podcast);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/** Create a new playlist */\r\n\tcreatePlaylist = podcast => {\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tconst { uid, currentPlaylist, playlistName } = this.state;\r\n\t\tconst newKey = dbRef.child('users').child(uid).push().key;\r\n\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tcurrentPlaylist: newKey,\r\n\t\t}, () => {\r\n\r\n\t\t\tdbRef.child('users').child(uid).child(newKey).set({playlist_title: \"Untitled Playlist\"});\r\n\t\t\tdbRef.child('users').child(uid).child(newKey).push(podcast);\r\n\t\t})\r\n\t}\r\n\r\n\tsetActivePlaylist = (key, currentTitle) => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentPlaylist: key,\r\n\t\t\tplaylistName: currentTitle,\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/** \r\n\t * Rename playlist in database\r\n\t * @param {string} key The key of the podcast to rename\r\n\t */\r\n\trenamePlaylist = key => {\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tconst { uid, currentPlaylist, playlistName } = this.state;\r\n\r\n\t\tdbRef.child('users').child(uid).child(currentPlaylist).child('playlist_title').set(playlistName);\r\n\t}\r\n\r\n\t/** Update playlist name in state on user input */\r\n\tupdatePlaylistName = event => {\r\n\t\tconst newName = event.target.value;\r\n\t\tthis.setState({\r\n\t\t\tplaylistName: newName,\r\n\t\t}, this.renamePlaylist)\r\n  }\r\n  \r\n  // rerenders the page when the user clicks next page\r\n  nextPage = (event) => {\r\n    // const offset = this.state.offset;\r\n    this.setState({\r\n      offset: this.state.offset + 10,\r\n    })\r\n    this.getPodcasts();\r\n  }\r\n\r\n  prevPage = (event) => {\r\n    this.setState({\r\n      offset: this.state.offset - 10,\r\n    })\r\n    this.getPodcasts();\r\n  }\r\n\r\n  /** sort through podcast length through onClick asc + desc buttons */\r\n  sortPodcasts = (sortType) => {\r\n    const sortedPodcasts = [...this.state.podcasts]\r\n    sortedPodcasts.sort((a, b) => (sortType === 'asc') ? parseFloat(a.audio_length_sec) - parseFloat (b.audio_length_sec) : parseFloat(b.audio_length_sec) - parseFloat (a.audio_length_sec));\r\n    this.setState({\r\n      podcasts:sortedPodcasts,\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\t\tconst { isLoading, podcasts, userPlaylists, userTime, genres, currentPlaylist, playlistName, isStarted } = this.state;\r\n\r\n\r\n    // const HeaderProps = {\r\n    //   setUserTime: this.setUserTime,\r\n    //   userTime: userTime,\r\n    //   selectGenre: this.selectGenre,\r\n    //   genres: genres,\r\n    //   handleSubmit: this.handleSubmit,\r\n    // }\r\n\r\n    return (\r\n\r\n          <Router>\r\n            <div className=\"App\">\r\n              \r\n              <Route exact path=\"/\"\r\n                render={(props) => <Header {...props}\r\n                  setUserTime={this.setUserTime}\r\n                  userTime={userTime}\r\n                  selectGenre={this.selectGenre}\r\n                  genres={genres}\r\n\t\t\t\t\t\t\t\t\thandleSubmit={this.handleSubmit}\r\n\t\t\t\t\t\t\t\t\tloading={isLoading} />} \r\n              />\r\n      \r\n              {isLoading ? (\r\n                <p className=\"loading\">Loading...</p>\r\n              ) : (\r\n                <div className=\"podcastContainer\">\r\n                  <Route exact path=\"/\" \r\n                  render={(props) => <Podcast {...props}\r\n                  podcasts={podcasts} add={this.addToPlaylist} sort={this.sortPodcasts} /> }\r\n                  /> \r\n                  <div class=\"page wrapper\">\r\n\r\n                    {this.state.podcasts.length != 0 ? \r\n                    (<>\r\n                      {this.state.offset >= 20 ? \r\n                        (<button className=\"pageButton\" onClick={() => this.prevPage()}>⬅ Previous Page</button>) \r\n                        : (null) }  \r\n                      <button className=\"pageButton\" onClick={() => this.nextPage()}>Next Page ➡</button>\r\n                    </>)\r\n                      : (null)}\r\n\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <Route path=\"/podcast/:podcastID\" component={PodcastInfo} />\r\n          \r\n              <Route exact path=\"/\"\r\n                render={(props) => <SideMenu {...props}\r\n                  playlists={userPlaylists}\r\n                  remove={this.removePlaylist}\r\n                  removeItem={this.removePlaylistItem}\r\n                  createPlaylist={this.createPlaylist}\r\n                  setActive={this.setActivePlaylist}\r\n                  current={currentPlaylist}\r\n                  rename={this.renamePlaylist}\r\n                  updateName={this.updatePlaylistName}\r\n                  userTime={this.state.userTime}\r\n                  title={playlistName}\r\n                />}\r\n              />\r\n      \r\n              <Route path=\"/\"\r\n                render={(props) => <Footer {...props} />}\r\n              />\r\n      \r\n            </div>\r\n          </Router>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}